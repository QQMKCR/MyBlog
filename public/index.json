
      
      
      
    
      
      
      
    
      
      
      
    
      
      
      
    
      
      
      
    
      
      
      
    
      
      
      
    
      
      
      
    
      
      
      
    
      
      
      
    
      
      
      
    
      
      
      
    
      
      
      
    [{"authors":null,"categories":null,"content":"\n","date":1761228980,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1761293491,"objectID":"58b169837e38bc67f382fa7f6dcb8986","permalink":"http://localhost:1313/certificate/javascript_esentials2/","publishdate":"2025-10-23T21:16:20+07:00","relpermalink":"/certificate/javascript_esentials2/","section":"certificate","summary":"\n","tags":null,"title":"Javascript_esentials2","type":"certificate"},{"authors":null,"categories":null,"content":"\n","date":1761228974,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1761293488,"objectID":"6044250aa6b87f74ff738438384bfb77","permalink":"http://localhost:1313/certificate/javascript_esentials1/","publishdate":"2025-10-23T21:16:14+07:00","relpermalink":"/certificate/javascript_esentials1/","section":"certificate","summary":"\n","tags":null,"title":"Javascript_esentials1","type":"certificate"},{"authors":null,"categories":null,"content":"\n","date":1761224616,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1761293495,"objectID":"b69be771c116a44456a1bee479264622","permalink":"http://localhost:1313/certificate/networking_basics/","publishdate":"2025-10-23T20:03:36+07:00","relpermalink":"/certificate/networking_basics/","section":"certificate","summary":"\n","tags":null,"title":"Networking Basics","type":"certificate"},{"authors":null,"categories":null,"content":"Giao thức TCP và lập trình Socket cơ bản\nGiao thức TCP (Transmission Control Protocol) đảm bảo truyền dữ liệu đáng tin cậy giữa client và server. Java cung cấp các lớp ServerSocket và Socket để làm việc với TCP.\nVí dụ: Server TCP cơ bản\nTạo một server lắng nghe kết nối trên cổng 12345:\nGiải thích\nServerSocket: Lắng nghe kết nối từ client.\naccept(): Chấp nhận kết nối và trả về một Socket.\nSau khi kết nối, server và client có thể trao đổi dữ liệu qua InputStream và OutputStream.\nHãy thử viết một client kết nối đến server này trong bài tiếp theo!\n","date":1760971367,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1761293481,"objectID":"c0502146a67a8173e2e5dfe747afd9c5","permalink":"http://localhost:1313/post/tcp-socket-basics/","publishdate":"2025-10-20T21:42:47+07:00","relpermalink":"/post/tcp-socket-basics/","section":"post","summary":"Giao thức TCP và lập trình Socket cơ bản\nGiao thức TCP (Transmission Control Protocol) đảm bảo truyền dữ liệu đáng tin cậy giữa client và server. Java cung cấp các lớp ServerSocket và Socket để làm việc với TCP.\nVí dụ: Server TCP cơ bản\nTạo một server lắng nghe kết nối trên cổng 12345:\nGiải thích\nServerSocket: Lắng nghe kết nối từ client.\naccept(): Chấp nhận kết nối và trả về một Socket.\n","tags":null,"title":"Giao thức TCP và lập trình Socket cơ bản","type":"post"},{"authors":null,"categories":null,"content":"Giao thức UDP và DatagramSocket\nUDP (User Datagram Protocol) là giao thức nhanh, không đảm bảo thứ tự dữ liệu. Java sử dụng DatagramSocket và DatagramPacket cho UDP.\nVí dụ: Server UDP\nVí dụ: Client UDP\nimport java.net.*;\nLưu ý\nUDP không đảm bảo dữ liệu đến đúng thứ tự hoặc đến được.\nThích hợp cho ứng dụng cần tốc độ cao (như streaming).\n","date":1760971367,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1761293483,"objectID":"0657ee0ce4e49e3b504b807b5aa3f382","permalink":"http://localhost:1313/post/udp-datagram-socket/","publishdate":"2025-10-20T21:42:47+07:00","relpermalink":"/post/udp-datagram-socket/","section":"post","summary":"Giao thức UDP và DatagramSocket\nUDP (User Datagram Protocol) là giao thức nhanh, không đảm bảo thứ tự dữ liệu. Java sử dụng DatagramSocket và DatagramPacket cho UDP.\nVí dụ: Server UDP\nVí dụ: Client UDP\nimport java.net.*;\nLưu ý\nUDP không đảm bảo dữ liệu đến đúng thứ tự hoặc đến được.\nThích hợp cho ứng dụng cần tốc độ cao (như streaming).\n","tags":null,"title":"Giao thức UDP và DatagramSocket","type":"post"},{"authors":null,"categories":null,"content":"Gửi và nhận đối tượng qua mạng\nJava hỗ trợ gửi/nhận đối tượng qua mạng bằng cơ chế serialization (triển khai Serializable).\nVí dụ: Đối tượng Person\nCode Server\nCode Client\nLưu ý\nClass phải implement Serializable.\nCẩn thận với phiên bản class khi deserialize.\n","date":1760971367,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1761293470,"objectID":"33a37754a05740746917d31e46c45bb0","permalink":"http://localhost:1313/post/object-serialization/","publishdate":"2025-10-20T21:42:47+07:00","relpermalink":"/post/object-serialization/","section":"post","summary":"Gửi và nhận đối tượng qua mạng\nJava hỗ trợ gửi/nhận đối tượng qua mạng bằng cơ chế serialization (triển khai Serializable).\nVí dụ: Đối tượng Person\nCode Server\nCode Client\nLưu ý\nClass phải implement Serializable.\nCẩn thận với phiên bản class khi deserialize.\n","tags":null,"title":"Gửi và nhận đối tượng qua mạng","type":"post"},{"authors":null,"categories":null,"content":"Lập trình Server-Client đơn giản với TCP\nChúng ta sẽ xây dựng một ứng dụng client-server, trong đó client gửi một thông điệp và server trả lời.\nCode Server\nCode Client\nCách chạy\nChạy TCPServer trước.\nChạy TCPClient để gửi thông điệp và nhận phản hồi.\nỨng dụng này là nền tảng cho các hệ thống mạng phức tạp hơn.\n","date":1760971367,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1761293478,"objectID":"1949817f03843e9f6357fbc2ee22347a","permalink":"http://localhost:1313/post/tcp-server-client/","publishdate":"2025-10-20T21:42:47+07:00","relpermalink":"/post/tcp-server-client/","section":"post","summary":"Lập trình Server-Client đơn giản với TCP\nChúng ta sẽ xây dựng một ứng dụng client-server, trong đó client gửi một thông điệp và server trả lời.\nCode Server\nCode Client\nCách chạy\nChạy TCPServer trước.\nChạy TCPClient để gửi thông điệp và nhận phản hồi.\nỨng dụng này là nền tảng cho các hệ thống mạng phức tạp hơn.\n","tags":null,"title":"Lập trình Server-Client đơn giản với TCP","type":"post"},{"authors":null,"categories":null,"content":"Sử dụng Java NIO cho lập trình mạng\nJava NIO (Non-blocking I/O) cho phép xử lý nhiều kết nối hiệu quả hơn so với socket truyền thống.\nVí dụ: Server NIO\nGiải thích\nSelector: Quản lý nhiều kênh (channels).\nServerSocketChannel: Thay thế ServerSocket cho non-blocking I/O.\nHiệu quả hơn khi xử lý hàng nghìn kết nối.\n","date":1760971367,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1761293462,"objectID":"9d9be6e96c4334aa2d47ccfb2ba4bb7b","permalink":"http://localhost:1313/post/java-nio-networking/","publishdate":"2025-10-20T21:42:47+07:00","relpermalink":"/post/java-nio-networking/","section":"post","summary":"Sử dụng Java NIO cho lập trình mạng\nJava NIO (Non-blocking I/O) cho phép xử lý nhiều kết nối hiệu quả hơn so với socket truyền thống.\nVí dụ: Server NIO\nGiải thích\nSelector: Quản lý nhiều kênh (channels).\nServerSocketChannel: Thay thế ServerSocket cho non-blocking I/O.\nHiệu quả hơn khi xử lý hàng nghìn kết nối.\n","tags":null,"title":"Sử dụng Java NIO cho lập trình mạng","type":"post"},{"authors":null,"categories":null,"content":"Xây dựng ứng dụng chat đơn giản\nỨng dụng chat cho phép nhiều client gửi tin nhắn đến server, server phát lại cho tất cả client.\nCode Server\nCode Client\nCách chạy\nChạy ChatServer.\nChạy nhiều instance của ChatClient trong các terminal khác.\nGõ tin nhắn trong client, server sẽ phát lại cho tất cả client.\n","date":1760971367,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1761293474,"objectID":"c193b0632e822ec9d5f7206cd726a0c6","permalink":"http://localhost:1313/post/simple-chat-app/","publishdate":"2025-10-20T21:42:47+07:00","relpermalink":"/post/simple-chat-app/","section":"post","summary":"Xây dựng ứng dụng chat đơn giản\nỨng dụng chat cho phép nhiều client gửi tin nhắn đến server, server phát lại cho tất cả client.\nCode Server\nCode Client\nCách chạy\nChạy ChatServer.\nChạy nhiều instance của ChatClient trong các terminal khác.\nGõ tin nhắn trong client, server sẽ phát lại cho tất cả client.\n","tags":null,"title":"Xây dựng ứng dụng chat đơn giản","type":"post"},{"authors":null,"categories":null,"content":"Xử lý lỗi và bảo mật cơ bản trong lập trình mạng\nLập trình mạng cần xử lý lỗi và đảm bảo bảo mật để tránh crash và tấn công.\nXử lý lỗi\nIOException: Xử lý khi socket bị đóng hoặc kết nối thất bại.\nNullPointerException: Kiểm tra dữ liệu trước khi xử lý.\nBảo mật cơ bản\nSử dụng SSL/TLS: Dùng SSLSocket thay vì Socket để mã hóa dữ liệu.\nKiểm tra đầu vào: Tránh SQL injection hoặc buffer overflow.\nĐóng tài nguyên: Đảm bảo đóng Socket, ServerSocket trong khối finally.\nLưu ý\nLuôn kiểm tra kết nối trước khi gửi/nhận dữ liệu.\nSử dụng logging để debug lỗi mạng.\n","date":1760971367,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1761293459,"objectID":"88df0cfed2e5d04457f1caddbfa9d5e2","permalink":"http://localhost:1313/post/error-handling-security/","publishdate":"2025-10-20T21:42:47+07:00","relpermalink":"/post/error-handling-security/","section":"post","summary":"Xử lý lỗi và bảo mật cơ bản trong lập trình mạng\nLập trình mạng cần xử lý lỗi và đảm bảo bảo mật để tránh crash và tấn công.\nXử lý lỗi\nIOException: Xử lý khi socket bị đóng hoặc kết nối thất bại.\nNullPointerException: Kiểm tra dữ liệu trước khi xử lý.\nBảo mật cơ bản\nSử dụng SSL/TLS: Dùng SSLSocket thay vì Socket để mã hóa dữ liệu.\n","tags":null,"title":"Xử lý lỗi và bảo mật cơ bản trong lập trình mạng","type":"post"},{"authors":null,"categories":null,"content":"Xử lý nhiều client với Multithreading\nĐể server xử lý nhiều client đồng thời, ta sử dụng đa luồng (multithreading) trong Java.\nCode Server\nGiải thích\nMỗi client kết nối sẽ được xử lý trong một thread riêng.\nClientHandler là một class xử lý từng client, chạy trong thread riêng.\n","date":1760971367,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1761293466,"objectID":"184776fdf57b40e24d8ea733cd33d7fb","permalink":"http://localhost:1313/post/multithreading-clients/","publishdate":"2025-10-20T21:42:47+07:00","relpermalink":"/post/multithreading-clients/","section":"post","summary":"Xử lý nhiều client với Multithreading\nĐể server xử lý nhiều client đồng thời, ta sử dụng đa luồng (multithreading) trong Java.\nCode Server\nGiải thích\nMỗi client kết nối sẽ được xử lý trong một thread riêng.\nClientHandler là một class xử lý từng client, chạy trong thread riêng.\n","tags":null,"title":"Xử lý nhiều client với Multithreading","type":"post"},{"authors":null,"categories":null,"content":"Lập trình mạng máy tính là quá trình xây dựng các ứng dụng cho phép các thiết bị giao tiếp qua mạng (LAN, Internet). Java cung cấp gói java.net mạnh mẽ để hỗ trợ lập trình mạng với các giao thức như TCP và UDP. Tại sao chọn Java?\nĐộc lập nền tảng: Code Java chạy trên mọi hệ điều hành. Thư viện phong phú: Gói java.net và java.nio hỗ trợ socket, URL, và hơn thế nữa. Hỗ trợ đa luồng: Dễ dàng xử lý nhiều kết nối đồng thời.\nCác khái niệm cơ bản\nSocket: Điểm cuối để gửi/nhận dữ liệu giữa client và server. TCP: Giao thức đáng tin cậy, đảm bảo dữ liệu đến đúng thứ tự. UDP: Giao thức nhanh, không đảm bảo thứ tự dữ liệu.\nTrong các bài tiếp theo, chúng ta sẽ khám phá cách sử dụng socket, TCP, UDP và các kỹ thuật nâng cao trong Java.\n","date":1760968800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1760974356,"objectID":"71e59d8ac4f560e77d6d7fd18808eb3b","permalink":"http://localhost:1313/post/intro-network-programming/","publishdate":"2025-10-20T21:00:00+07:00","relpermalink":"/post/intro-network-programming/","section":"post","summary":"Lập trình mạng máy tính là quá trình xây dựng các ứng dụng cho phép các thiết bị giao tiếp qua mạng (LAN, Internet). Java cung cấp gói java.net mạnh mẽ để hỗ trợ lập trình mạng với các giao thức như TCP và UDP. Tại sao chọn Java?\nĐộc lập nền tảng: Code Java chạy trên mọi hệ điều hành. Thư viện phong phú: Gói java.net và java.nio hỗ trợ socket, URL, và hơn thế nữa. Hỗ trợ đa luồng: Dễ dàng xử lý nhiều kết nối đồng thời.\n","tags":null,"title":"Giới thiệu về lập trình mạng máy tính với Java","type":"post"}]